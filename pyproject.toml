[tool.poetry]
name = "gaia"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9, <3.11"
pytest = "^7.1.2"


[tool.poetry.group.dev.dependencies]
isort = "^5.10.1"
black = "^22.3.0"
pylint = "^2.14.3"

[tool.isort]
profile = "black"
lines_after_imports = 2
line_length = 100


[tool.black]
line-length = 100
target-version = ['py39']

[tool.coverage.run]
omit = ['*tests*']

[tool.coverage.report]
ignore_errors = true

[tool.pylint]
    [tool.pylint.master]
    ignore="test[s]"

    [tool.pylint.'MESSAGES CONTROL']
    disable="super-on-old-class,arguments-differ,signature-differs,method-hidden,abstract-method,no-member,relative-import,no-init,import-error,attribute-defined-outside-init,abstract-class-not-used,unused-argument,unused-variable,invalid-name,duplicate-code,abstract-class-little-used,too-few-public-methods,too-many-instance-attributes,too-many-ancestors,too-many-return-statements,too-many-lines,too-many-locals,too-many-function-args,too-many-public-methods,too-many-arguments,bad-continuation,no-self-use,missing-docstring,fixme,star-args,locally-disabled,locally-enabled,bad-option-value"

    [tool.pylint.'REPORTS']       
    evaluation="10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

    [tool.pylint.'SPELLING']
    spelling-store-unknown-words=false

    [tool.pylint.'SIMILARITIES']  
    ignore-imports=false

    [tool.pylint.'MISCELLANEOUS']
    notes=["TODO", "FIXME", "BUG", "NOTE", "HACK", "REVIEW"]

    [tool.pylint.'VARIABLES']
    init-import=true
    callbacks=["cb_" ,"_cb"]

    [tool.pylint.'TYPECHECK']
    generated-members="REQUEST,acl_users,aq_parent"


    [tool.pylint.'BASIC']
    bad-functions=["map", "filter", "input"]
    function-rgx="[a-z_][a-z0-9_]{2,50}$"
    function-name-hint="[a-z_][a-z0-9_]{2,50}$"
    variable-rgx="[a-z_][a-z0-9_]{1,30}$"
    variable-name-hint="[a-z_][a-z0-9_]{2,30}$"
    const-rgx="(([A-Z_][A-Z0-9_]*)|(__.*__))$"
    const-name-hint="(([A-Z_][A-Z0-9_]*)|(__.*__))$"
    attr-rgx="[a-z_][a-z0-9_]{2,30}$"
    attr-name-hint="[a-z_][a-z0-9_]{2,30}$"
    argument-rgx="[a-z_][a-z0-9_]{2,30}$"
    argument-name-hint="[a-z_][a-z0-9_]{2,30}$"
    class-attribute-rgx="([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
    class-attribute-name-hint="([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
    inlinevar-rgx="[A-Za-z_][A-Za-z0-9_]*$"
    inlinevar-name-hint="[A-Za-z_][A-Za-z0-9_]*$"
    class-rgx="[A-Z_][a-zA-Z0-9]+$"
    class-name-hint="[A-Z_][a-zA-Z0-9]+$"
    module-rgx="(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
    module-name-hint="(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
    method-rgx="[a-z_][a-z0-9_]{2,30}$"
    method-name-hint="[a-z_][a-z0-9_]{2,30}$"
    no-docstring-rgx="__.*__"
    docstring-min-length=-1

    [tool.pylint.'FORMAT']
    max-line-length=100
    ignore-long-lines="^\s*(# )?<?https?://\S+>?$"
    single-line-if-stmt=false
    no-space-check="trailing-comma,dict-separator"
    indent-string="    "
    indent-after-paren=4
    expected-line-ending-format="LF"

    [tool.pylint.'IMPORTS']
    deprecated-modules="regsub,TERMIOS,Bastion,rexec"

    [tool.pylint.'CLASSES']
    defining-attr-methods="__init__,__new__,setUp"
    valid-classmethod-first-arg="cls"
    valid-metaclass-classmethod-first-arg="mcs"
    exclude-protected="_asdict,_fields,_replace,_source,_make"

    [tool.pylint.'EXCEPTIONS']
    overgeneral-exceptions="Exception"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
