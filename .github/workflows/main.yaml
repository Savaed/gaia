name: main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  main:
    name: Main workflow
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ["3.10"]
      fail-fast: false
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo PY_VERSION=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

    - name: Bootstrap poetry
      shell: bash
      run: curl -sSL https://install.python-poetry.org | python3 - -y

    - name: Update PATH
      if: ${{ matrix.os != 'Windows' }}
      shell: bash
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure poetry
      shell: bash
      run: poetry config virtualenvs.in-project true || poetry config experimental.new-installer false || poetry config installer.parallel false

    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.PY_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: timeout 10s poetry run pip --version || rm -rf .venv

    - name: Install dependencies
      shell: bash
      run: poetry install

    - name: Run pre-commit
      run: poetry run pre-commit run --show-diff-on-failure

    - name: Run pytest
      run: poetry run pytest --cov=. --cov-report xml tests

    - name: Run Codecov report
      uses: codecov/codecov-action@v3
      with:
        # see https://github.com/codecov/codecov-action/issues/557 - for private repos only
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
