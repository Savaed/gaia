name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]


jobs:
  tests:
    name: ${{ matrix.os }} / python ${{ matrix.python-version }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ["3.9"]
      fail-fast: false
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-20.04


    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: curl -sSL https://install.python-poetry.org | python3 - -y && poetry --version

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      # - name: Run mypy
      #   run: poetry run mypy

      # - name: Install pytest plugin
      #   run: poetry run pip install pytest-github-actions-annotate-failures

      - name: Run pytest
        run: poetry run pytest -q tests
